{"version":3,"file":"js/main.js","mappings":"yBAEAA,SAASC,iBAAiB,mBAAoB,WAC1CD,SAASC,iBAAiB,QAASC,UAU/B,GATIC,EAAEC,OAAOC,QAAQ,sBAAyBF,EAAEC,OAAOC,QAAQ,4BAC3DF,EAAEC,OAAOC,QAAQ,QAAQC,iBAAiB,qBAAqBC,QAAQC,IACnEA,EAAIC,UAAUC,OAAO,eAG1BP,EAAEC,OAAOC,QAAQ,6BAChBF,EAAEQ,iBACFR,EAAEC,OAAOC,QAAQ,qBAAqBC,iBAAiB,kBAAkB,GAAGG,UAAUG,OAAO,cAE9FT,EAAEC,OAAOC,QAAQ,MAAMQ,aAAa,uBAAwB,CAC3DV,EAAEQ,iBAEFR,EAAEC,OAAOC,QAAQ,QAAQS,cAAc,kCAAkCL,UAAUM,IAAI,WAEvF,MAAMC,EAAMb,EAAEC,OAAOC,QAAQ,KAAKQ,aAAa,uBACzCI,QAAiBC,MAAMF,GACvBG,EAAYnB,SAASoB,KAE3B,GAAGH,EAASI,GAAI,CACZ,MAAMC,QAAaL,EAASM,OACtBC,EAAYF,EAAKG,MAAM,gCACvBC,EAAYJ,EAAKG,MAAM,iCAC7B,GAAIC,EAAW,CAEX,MAAMC,EAAgBD,EAAU,GAAGD,MAAM,8CACrCE,GACAA,EAAcpB,QAAQqB,IAClB,MAAMC,EAAWD,EAAUH,MAAM,iBACjC,GAAII,EAAU,CACV,MAAMC,EAAS9B,SAAS+B,cAAc,UACtCD,EAAOE,IAAMH,EAAS,GACtBC,EAAO5B,OAAQ,EACfF,SAASiC,KAAKC,YAAYJ,EAC9B,IAGR,MAAMK,EAAcT,EAAU,GACV1B,SAASiC,KACjBG,UAAYD,CAC5B,CACA,GAAIX,EAAW,CAEX,MAAMG,EAAgBH,EAAU,GAAGC,MAAM,8CACrCE,GACAA,EAAcpB,QAAQqB,IAClB,MAAMC,EAAWD,EAAUH,MAAM,iBACjC,GAAII,EAAU,CACV,MAAMC,EAAS9B,SAAS+B,cAAc,UACtCD,EAAOE,IAAMH,EAAS,GACtBC,EAAO5B,OAAQ,EACfF,SAASoB,KAAKc,YAAYJ,EAC9B,IAGRX,EAAUiB,UAAYZ,EAAU,EACpC,MACIL,EAAUiB,UAAY,uDAG1BC,QAAQC,UAAU,CAAC,EAAG,GAAItB,EAC9B,MACIG,EAAUiB,UAAY,sDAE9B,CACA,GAAGjC,EAAEC,OAAOC,QAAQ,4BAA6B,CAC7CF,EAAEQ,iBACF,MAAMQ,EAAYnB,SAASoB,KAC3BjB,EAAEC,OAAOC,QAAQ,QAAQS,cAAc,kCAAkCL,UAAUM,IAAI,WAEvF,MACMwB,EADcpC,EAAEC,OAAOC,QAAQ,qBAAqBS,cAAc,SAC9C0B,MAAMC,OAChC,GAAGF,EAAO,CACN,MAAMvB,EAAM,OAAO0B,mBAAmBH,KAChCtB,QAAiBC,MAAMF,GAC7B,IAAIM,EAEAA,EADDL,EAASI,SACKJ,EAASM,OAGf,6DAA6DgB,WAGxEpB,EAAUiB,UAAYd,EACtBH,EAAUL,cAAc,2BAA2B0B,MAAQD,EAC3DF,QAAQC,UAAU,CAAC,EAAG,GAAItB,EAC9B,CACJ,IAEJhB,SAASC,iBAAiB,UAAWE,IACjC,GAAIA,EAAEwC,SAAqB,MAAVxC,EAAEyC,KAA0B,MAAVzC,EAAEyC,IAAa,CAKjC,MAAVzC,EAAEyC,KACDzC,EAAEQ,iBAEN,MAAMkC,EAAc7C,SAASc,cAAc,2BACxC+B,GACCA,EAAYC,OAEpB,GAER,E","sources":["webpack://charmfeed/./src/js/main.js"],"sourcesContent":["import '../scss/main.scss';\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    document.addEventListener(\"click\", async e => {\r\n        if(!e.target.closest(\".blockblog-header\") && !e.target.closest(\".blockblog-menu-toggler\")) {\r\n            e.target.closest('body').querySelectorAll(\".blockblog-header\").forEach(nav => {\r\n                nav.classList.remove(\"nav-shown\");\r\n            });\r\n        }\r\n        if(e.target.closest(\".blockblog-menu-toggler\")) {\r\n            e.preventDefault();\r\n            e.target.closest(\".blockblog-header\").querySelectorAll(\".blockblog-nav\")[0].classList.toggle(\"nav-shown\");\r\n        }\r\n        if(e.target.closest(\"a\")?.getAttribute(\"data-blockblog-load\")) {\r\n            e.preventDefault();\r\n\r\n            e.target.closest(\"body\").querySelector(\"header .blockblog-top-progress\").classList.add('loading')\r\n\r\n            const url = e.target.closest(\"a\").getAttribute(\"data-blockblog-load\");\r\n            const response = await fetch(url);\r\n            const container = document.body;\r\n            \r\n            if(response.ok) {\r\n                const data = await response.text();\r\n                const bodyMatch = data.match(/<body[^>]*>([\\s\\S]*)<\\/body>/);\r\n                const headMatch = data.match(/<head[^>]*>([\\s\\S]*?)<\\/head>/);\r\n                if (headMatch) {\r\n                    // if there is script:src load it dynamically by creating a script element\r\n                    const scriptMatches = headMatch[1].match(/<script[^>]*src=\"([^\"]*)\"[^>]*><\\/script>/g);\r\n                    if (scriptMatches) {\r\n                        scriptMatches.forEach(scriptTag => {\r\n                            const srcMatch = scriptTag.match(/src=\"([^\"]*)\"/);\r\n                            if (srcMatch) {\r\n                                const script = document.createElement('script');\r\n                                script.src = srcMatch[1];\r\n                                script.async = true;\r\n                                document.head.appendChild(script);\r\n                            }\r\n                        });\r\n                    }\r\n                    const headContent = headMatch[1];\r\n                    const headElement = document.head;\r\n                    headElement.innerHTML = headContent;\r\n                }\r\n                if (bodyMatch) {\r\n                    // if there is script:src load it dynamically by creating a script element\r\n                    const scriptMatches = bodyMatch[1].match(/<script[^>]*src=\"([^\"]*)\"[^>]*><\\/script>/g);\r\n                    if (scriptMatches) {\r\n                        scriptMatches.forEach(scriptTag => {\r\n                            const srcMatch = scriptTag.match(/src=\"([^\"]*)\"/);\r\n                            if (srcMatch) {\r\n                                const script = document.createElement('script');\r\n                                script.src = srcMatch[1];\r\n                                script.async = true;\r\n                                document.body.appendChild(script);\r\n                            }\r\n                        });\r\n                    }\r\n                    container.innerHTML = bodyMatch[1];\r\n                } else {\r\n                    container.innerHTML = '<div class=\"blockblog-error\">Content not found</div>';\r\n                }\r\n\r\n                history.pushState({}, '', url);\r\n            } else {\r\n                container.innerHTML = '<div class=\"blockblog-error\">Content not found</div>';\r\n            }\r\n        }\r\n        if(e.target.closest(\".blockblog-header-search\")) {\r\n            e.preventDefault();\r\n            const container = document.body;\r\n            e.target.closest(\"body\").querySelector(\"header .blockblog-top-progress\").classList.add('loading')\r\n\r\n            const searchInput = e.target.closest(\".blockblog-search\").querySelector(\"input\");\r\n            const query = searchInput.value.trim();\r\n            if(query) {\r\n                const url = `/?s=${encodeURIComponent(query)}`;\r\n                const response = await fetch(url);\r\n                let data;\r\n                if(response.ok) {\r\n                    data = await response.text();\r\n                }\r\n                else{\r\n                    data = `<div class=\"blockblog-search-error\">No results found for \"${query}\"</div>`;\r\n\r\n                }\r\n                container.innerHTML = data;\r\n                container.querySelector(\".blockblog-search input\").value = query;\r\n                history.pushState({}, '', url);\r\n            }\r\n        }\r\n    });\r\n    document.addEventListener(\"keydown\", e => {\r\n        if((e.ctrlKey && e.key === 'k') || e.key === '/') {\r\n            /**\r\n             * only prevent default if the key is not '/'\r\n             */\r\n\r\n            if(e.key !== '/'){\r\n                e.preventDefault();\r\n            }\r\n            const searchInput = document.querySelector(\".blockblog-search input\");\r\n            if(searchInput) {\r\n                searchInput.focus();\r\n            }\r\n        }\r\n    });\r\n});\r\n"],"names":["document","addEventListener","async","e","target","closest","querySelectorAll","forEach","nav","classList","remove","preventDefault","toggle","getAttribute","querySelector","add","url","response","fetch","container","body","ok","data","text","bodyMatch","match","headMatch","scriptMatches","scriptTag","srcMatch","script","createElement","src","head","appendChild","headContent","innerHTML","history","pushState","query","value","trim","encodeURIComponent","ctrlKey","key","searchInput","focus"],"sourceRoot":""}